---
title: Creating Sink Resources
owner: PKS
---

This topic describes how to create a sink resource for a Kubernetes cluster
provisioned with <%= vars.product_full %> or for a namespace within a
cluster.

## <a id='overview'></a>Overview

Sink resources enable <%= vars.product_short %> users to collect
logs and metrics. You can create the following types of sink resources:

<table>
  <tr>
    <th width="30%">Sink Resource</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>ClusterSink</code></td>
    <td><p>Sends logs from a cluster, including logs from all namespaces within the cluster, to a log destination. Logs are transported using one of the following:</p>
        <ul>
          <li>The Syslog Protocol defined in <a href="https://tools.ietf.org/html/rfc5424">RFC 5424</a></li>
          <li>Webhook</li>
        </ul>
    </td>
  </tr>
  <tr>
    <td><code>Sink</code></td>
    <td>Sends logs from a specified namespace within a cluster to a log destination. Logs are transported following the Syslog Protocol defined in <a href="https://tools.ietf.org/html/rfc5424">RFC 5424</a>.</td>
  </tr>
  <tr>
    <td><code>ClusterMetricSink</code></td>
    <td>Collects and writes metrics from a cluster to specified outputs using input and output plugins.</td>
  </tr>
</table>

## <a id='prerequisites'></a>Prerequisites

Before creating a sink resource, do the following:

* If you want to create a `ClusterSink` or `Sink` resource, ensure that the **Enable Log Sink Resources** checkbox is selected in the <%= vars.product_tile %> tile.
* If you want to create a `ClusterMetricSink` resource, ensure that the **Enable Metric Sink Resources** checkbox is selected in the <%= vars.product_tile %> tile.

For more information, see the _Logging_ section of the <%= vars.product_short %> installation topic
for your IaaS:

* [Installing <%= vars.product_short %> on vSphere](installing-pks-vsphere.html#syslog)
* [Installing <%= vars.product_short %> on vSphere with NSX-T Integration](installing-nsx-t.html#syslog)
* [Installing <%= vars.product_short %> on GCP](installing-pks-gcp.html#syslog)
* [Installing <%= vars.product_short %> on AWS](installing-pks-aws.html#syslog)
* [Installing <%= vars.product_short %> on Azure](installing-pks-azure.html#syslog)

### <a name='cli-prereqs'></a> CLI Requirements

To create and manage sink resources, you must install the Kubernetes CLI, <code>kubectl</code>. 

Alternately, to manage `ClusterSink` resources with the PKS CLI, you must use PKS CLI v1.3 or later.

For installation instructions, see <a href="installing-kubectl-cli.html">Installing the Kubernetes CLI</a> 
and <a href="installing-pks-cli.html">Installing the PKS CLI</a>.

## <a id='define-resource'></a>Create Sinks

You can create log sinks for clusters and namespaces and metric sinks for clusters.

<p class="note"><strong>Note</strong>: Log sinks created in <%= vars.product_short %> do not support UDP connections.</p>

* If you want to create a `ClusterSink`, see
[ClusterSink Resources](#define-cluster-sink).
* If you want to create a `Sink`, see
[Sink Resources](#define-namespace-sink).
* If you want to create a `ClusterMetricSink`, see
[ClusterMetricSink Resources](#define-metric-sink).

### <a id='define-cluster-sink'></a>ClusterSink Resources

`ClusterSink` resources enable you to capture logs from your clusters.

To create and manage `ClusterSink` resources, you can:

* [Create ClusterSink Resource with the PKS CLI](#cluster-sink-pks)
* [Create a Syslog ClusterSink Resource with YAML and kubectl](#syslog-cluster-sink)
* [Create a Webhook ClusterSink Resource with YAML and kubectl](#webhook-cluster-sink)

#### <a id='cluster-sink-pks'></a> Create ClusterSink Resource with the PKS CLI

To create and apply a log sink to a cluster, run the following command:

```
pks create-sink CLUSTER-NAME \
syslog-tls://YOUR-LOG-DESTINATION:YOUR-LOG-DESTINATION-PORT
```
Where:

* `CLUSTER-NAME` is the name of your cluster.
* `YOUR-LOG-DESTINATION` is the URL or IP address of your log management service.
* `YOUR-LOG-DESTINATION-PORT` is the port number of your log management service.

For example:

<pre class="terminal">
$ pks create-sink my-cluster syslog-tls://example.com:12345
</pre>

If you do not specify a name, the command creates 
a sink resource in the cluster that shares the same name as the cluster.

To provide a name for the sink resources in your cluster, run the following command. 

```
pks create-sink CLUSTER-NAME --name YOUR-SINK \
syslog-tls://YOUR-LOG-DESTINATION:YOUR-LOG-DESTINATION-PORT
```
Where:

* `CLUSTER-NAME` is the name of your cluster.
* `YOUR-SINK` is the name of the sink you want to create.
* `YOUR-LOG-DESTINATION` is the URL or IP address of your log management service.
* `YOUR-LOG-DESTINATION-PORT` is the port number of your log management service.

For example:

<pre class="terminal">
$ pks create-sink my-cluster --name second-sink syslog-tls://example.org:54321
</pre>

Specifying a name is useful if you need to manage multiple sink resources in your cluster.

#### <a id='syslog-cluster-sink'></a> Create a Syslog ClusterSink Resource with YAML and kubectl

A syslog `ClusterSink` resource delivers logs using the TCP-based syslog protocol.

To define a syslog `ClusterSink` resource with YAML and `kubectl`, perform the following steps:

1. Create a YAML file that specifies your log destination in the following format:
  
    ```
    apiVersion: apps.pivotal.io/v1beta1
    kind: ClusterSink
    metadata:
       name: YOUR-SINK-NAME
    spec:
       type: syslog
       host: YOUR-LOG-DESTINATION
       port: YOUR-LOG-DESTINATION-PORT
       enable_tls: true
    ```
  Where:
    * `YOUR-SINK` is a name you choose for your sink.
    * `YOUR-LOG-DESTINATION` is the URL or IP address of your log management service.
    * `YOUR-LOG-DESTINATION-PORT` is the port number of your log management service.

1. Save the YAML file with an appropriate file name. For example, `my-cluster-sink.yml`.

1. Apply the `ClusterSink` resource to your cluster by running the following command:

    ```
    kubectl apply -f MY-SINK.yml
    ```
    Where `MY-SINK.yml` is the name of your YAML file.
    For example:
    <pre class='terminal'>
    $ kubectl apply -f my-cluster-sink.yml
    </pre>

#### <a id='webhook-cluster-sink'></a> Create a Webhook ClusterSink Resource with YAML and kubectl

A webhook `ClusterSink` resource batches logs into 1 second units, wraps the resulting payload in JSON, and uses the POST method to deliver the logs to the address of your log management service.

To define a webhook `ClusterSink` resource with YAML and `kubectl`, perform the following steps:

1. Create a YAML file that specifies your log destination in the following format:
  
    ```
    apiVersion: apps.pivotal.io/v1beta1
    kind: ClusterSink
    metadata:
      name: YOUR-SINK-NAME
    spec:
      type: webhook
      url: YOUR-LOG-DESTINATION
    ```
  Where:
    * `YOUR-SINK-NAME` is a name you choose for your sink.
    * `YOUR-LOG-DESTINATION` is the URL or IP address of your log management service.

1. Save the YAML file with an appropriate file name. For example, `my-cluster-sink.yml`.

1. Apply the `ClusterSink` resource to your cluster by running the following command:

    ```
    kubectl apply -f MY-SINK.yml
    ```
    Where `MY-SINK.yml` is the name of your YAML file.
    For example:
    <pre class='terminal'>
    $ kubectl apply -f my-cluster-sink.yml
    </pre>

### <a id='define-namespace-sink'></a>Sink Resources

A `Sink` resource filters logs by namespace within a cluster.

Currently, you can use only `kubectl` to create and manage namespace sinks.

#### <a id='sink-kubectl'></a> Create a Sink Resource with YAML and kubectl

To define a `Sink` resource with YAML and `kubectl`, perform the following steps:

1. Create a YAML file that specifies your log destination in the following format:

    ```
    apiVersion: apps.pivotal.io/v1beta1
    kind: Sink
    metadata:
      name: YOUR-SINK
      namespace: YOUR-NAMESPACE
    spec:
      type: syslog
      host: YOUR-LOG-DESTINATION
      port: YOUR-LOG-DESTINATION-PORT
      enable_tls: true
    ```
  Where:
    * `YOUR-SINK` is a name you choose for your sink.
    * `YOUR-NAMESPACE` is the name of your namespace.
    * `YOUR-LOG-DESTINATION` is the URL or IP address of your log management service.
    * `YOUR-LOG-DESTINATION-PORT` is the port number of your log management service.

1. Save the YAML file with an appropriate file name. For example, `my-namespace-sink.yml`.

1. Apply the `Sink` resource to your cluster by running the following command:

    ```
    kubectl apply -f MY-SINK.yml
    ```
   Where `MY-SINK.yml` is the name of your YAML file.
   For example:
  <pre class='terminal'>
  $ kubectl apply -f my-namespace-sink.yml
  </pre>

### <a id='define-metric-sink'></a> ClusterMetricSink Resources

By default, a `ClusterMetricSink` resource collects metrics from a cluster using the [Kubernetes Input Plugin]
(https://github.com/influxdata/telegraf/tree/master/plugins/inputs/kubernetes) and writes them to specified outputs.
For a list of supported metrics and output plugins,
see [Metrics](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/kubernetes#metrics)
and [Output Plugins](https://github.com/influxdata/telegraf#output-plugins) in the telegraf GitHub repository.

If you want to collect a larger set of metrics, you can replace the default Kubernetes input plugin
with the Prometheus input plugin. For more information about the Prometheus input plugin, see
[Prometheus Input Plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/prometheus) in
the telegraf GitHub repository.

To create a `ClusterMetricSink` resource, do one of the following:

* [Create a Default ClusterMetricSink Resource with YAML and kubectl](#default)
* [Create an Extended ClusterMetricSink Resource with YAML and kubectl](#extended)

Currently, you can use only `kubectl` to create and manage metric sinks for clusters.

#### <a id='default'></a> Create a Default ClusterMetricSink Resource with YAML and kubectl

To define a `ClusterMetricSink` resource with YAML and `kubectl`, perform the following steps:

1. Create a YAML file in the following format:

    ```
    apiVersion: apps.pivotal.io/v1beta1
    kind: ClusterMetricSink
    metadata:
      name: YOUR-SINK
    spec:
      inputs:
      outputs:
      - type: YOUR-OUTPUT-PLUGIN
    ```
  Where:
    * `YOUR-SINK` is a name you choose for your sink.
    * `YOUR-OUTPUT-PLUGIN` is the name of the output plugin you want to use.
  <p class="note"><strong>Note:</strong> You must leave the <code>inputs</code> field blank.</p>

    For example:

    ```
    apiVersion: apps.pivotal.io/v1beta1
    kind: ClusterMetricSink
    metadata:
      name: kubernetes-datadog
    spec:
      inputs:
      outputs:
      - type: datadog
        apikey: 123456example
    ```

1. Save the YAML file with an appropriate file name. For example, `my-cluster-metric-sink.yml`.

1. Apply the `ClusterMetricSink` resource to your cluster by running the following command:

    ```
    kubectl apply -f MY-SINK.yml
    ```
  Where `MY-SINK.yml` is the name of your YAML file.
  For example:
  <pre class='terminal'>
  $ kubectl apply -f my-cluster-metric-sink.yml
  </pre>

#### <a id='extended'></a> Create an Extended ClusterMetricSink Resource with YAML and kubectl

Before creating an extended `ClusterMetricSink` resource, you must deploy Helm.
For instructions on deploying Helm, see [Configure Tiller](./helm.html#configure-tiller)
in _Using Helm with <%= vars.product_short %>_.

1. Install the Prometheus node exporter by running the following command:

    ```
    helm install --name YOUR-RELEASE-NAME \
      --set service.targetPort=10536  \
      --set service.port=10536  \
        stable/prometheus-node-exporter
    ```
  Where `YOUR-RELEASE-NAME` is a release name you want to use for `prometheus-node-exporter`.

1. Create a YAML file in the format provided below.
Use the port and release name you specified in the previous step to configure the `inputs` field.

    ```
    apiVersion: apps.pivotal.io/v1beta1
    kind: ClusterMetricSink
    metadata:
    name: node-exporter
    spec:
    inputs:
     - type: prometheus
       urls:
         - http://my-release-prometheus-node-exporter.oratos:10536/metrics
    outputs:
    - type: datadog
     apikey: YOUR-API-KEY
    ```

1. Save the YAML file with an appropriate file name. For example, `my-cluster-metric-sink.yml`.

1. Apply the `ClusterMetricSink` resource to your cluster by running the following command:

    ```
    kubectl apply -f MY-SINK.yml
    ```
  Where `MY-SINK.yml` is the name of your YAML file.
  For example:
  <pre class='terminal'>
  $ kubectl apply -f my-cluster-metric-sink.yml
  </pre>

## <a id='list-sinks'></a> List Sinks

To list sinks for clusters and namespaces, use the commands in the following sections.

###<a id="cluster-sink-list"></a> ClusterSink Resources  

To list log sinks deployed to your cluster, run the following command:

```
pks sinks CLUSTER-NAME
```

Where `CLUSTER-NAME` corresponds to the name of your cluster.

Alternately, you can use `kubectl`:

```
kubectl get clustersinks
``` 

### <a id="sink-list"></a> Sink Resources

To list namespace log sinks, run the following command:

```
kubectl get sinks
``` 

### <a id="metric-sink-list"></a> ClusterMetricSink Resources

To list metric sinks deployed to your cluster, run the following command:

```
kubectl get clustermetricsinks
```

## <a id='delete-sinks'></a> Delete Sinks

To delete sinks for clusters and namespaces, use the commands in the following sections.

### <a id='cluster-sink-delete'></a> ClusterSink Resources

To delete all log sinks deployed to your cluster, run the following command:

```
pks delete-sink CLUSTER-NAME 
``` 

Where `CLUSTER-NAME` is the name of your cluster.

To delete a specific log sink, specify the name of the sink you want to delete:

```
pks delete-sink CLUSTER-NAME --name YOUR-SINK
``` 
Where:

* `CLUSTER-NAME` is the name of your cluster.
* `YOUR-SINK` is the name of your sink.

Alternately, you can use `kubectl`:

```
kubectl delete clustersink YOUR-SINK
``` 

Where `YOUR-SINK` is the name of your sink.  

### <a id='sink-delete'></a> Sink Resources

To delete a namespace log sink, run the following command:

```
kubectl delete sink YOUR-SINK
``` 

Where `YOUR-SINK` is the name of your sink.

### <a id="metric-sink-delete"></a> ClusterMetricSink Resources

To delete a metric sink deployed to your cluster, use the following command:

```
kubectl delete clustermetricsink YOUR-SINK
```

Where `YOUR-SINK` is the name of your sink.

## <a id="related-links"></a> Related Links

For more information on sinks in <%= vars.product_short %>, see the following topics:

* For information about using sinks for monitoring, see [Monitoring <%= vars.product_short %> with Sinks](./monitor-sinks.html).
* For information about sink architecture, see [Sink Architecture in <%= vars.product_short %>](sink-architecture.html).
